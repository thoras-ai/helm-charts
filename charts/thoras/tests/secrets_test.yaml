suite: Secrets
tests:
  - it: Creates the registry secret if password is set
    template: registry-secret.yaml
    set:
      imageCredentials:
        password: "frou-frou"
    asserts:
      - isKind:
          of: Secret
  - it: Doesn't create the registry secret if secretRef set
    template: registry-secret.yaml
    set:
      imageCredentials:
        secretRef: "frou-frou"
    asserts:
      - hasDocuments:
          count: 0
  - it: Fails if both password and reference defined
    template: registry-secret.yaml
    set:
      imageCredentials:
        secretRef: "some-reference"
        password: "blah"
    asserts:
      - failedTemplate: {}
  - it: Uses the reference name if it's passed
    templates:
      - collector/rbac.yaml
      - operator/rbac.yaml
      - dashboard/rbac.yaml
    set:
      imageCredentials:
        secretRef: "frou-frou"
    documentIndex: 0
    asserts:
      - equal:
          path: imagePullSecrets[0].name
          value: "frou-frou"

# Collector has its own tests for this
  - it: Points all apps to existing slack secret, if provided
    templates:
      - api-server/deployment.yaml
      - api-server-v2/deployment.yaml
      - dashboard/deployment.yaml
      - monitor/deployment.yaml
      - operator/deployment.yaml
      - reasoning-api/deployment.yaml
    set:
      slackWebhookUrlSecretRefName: "frou-frou"
      slackWebhookUrlSecretRefKey: "url"
      thorasMonitor:
        enabled: true
      thorasReasoning:
        api:
          enabled: true
    asserts:
      - equal:
          path: $..spec.containers[0].env[?(@.name =~ /SLACK_WEBHOOK_URL$/)].valueFrom.secretKeyRef.name
          value: "frou-frou"
      - equal:
          path: $..spec.containers[0].env[?(@.name =~ /SLACK_WEBHOOK_URL/)].valueFrom.secretKeyRef.key
          value: "url"

  - it: Points all apps to default slack secret, if no existing secret provided provided
    templates:
      - api-server/deployment.yaml
      - api-server-v2/deployment.yaml
      - collector/deployment.yaml
      - dashboard/deployment.yaml
      - monitor/deployment.yaml
      - operator/deployment.yaml
      - reasoning-api/deployment.yaml
    set:
      thorasMonitor:
        enabled: true
      thorasReasoning:
        api:
          enabled: true
    asserts:
      - equal:
          path: $..spec.containers[-1].env[?(@.name =~ /SLACK_WEBHOOK_URL$/)].valueFrom.secretKeyRef.name
          value: "thoras-slack"
      - equal:
          path: $..spec.containers[-1].env[?(@.name =~ /SLACK_WEBHOOK_URL$/)].valueFrom.secretKeyRef.key
          value: "webhookUrl"
          
  - it: Should set the SERVICE_CLUSTER_NAME environment variables
    templates:
      - api-server-v2/deployment.yaml
    set:
      cluster: 
        name: "test_dev"
    asserts:
      - equal:
          path: $..spec.containers[0].env[?(@.name =~ /SERVICE_CLUSTER_NAME$/)].value
          value: "test_dev"

