---
thorasVersion: "4.33.1"
cluster:
  name: ""

imageCredentials:
  registry: "us-east4-docker.pkg.dev/thoras-registry/platform"
  username: "_json_key_base64"

  # Set the license key directly as a variable (or alternatively
  # use imageCredentials.secretRef to reference an existing secret
  password: ""

  # Reference a pre-existing secret in the Thoras namespace
  secretRef: ""

resourceQuota:
  enabled: false
  pods: 200
  cronjobs: 200
  jobs: 200

imagePullPolicy: "IfNotPresent"

logLevel: info

# Enable Slack errors
slackErrorsEnabled: false

# Set Slack notification Webhook URL directly (or alternatively use
# use slackWebhookUrlSecretRef to reference an existing secret
slackWebhookUrl: ""

# If you'd like to reference an existing secret, use these two values
# to indicate the secret name and data key
slackWebhookUrlSecretRefName: ""
slackWebhookUrlSecretRefKey: ""

rbac:
  namespaces: []

thorasOperator:
  # Operator is a singleton -- don't change this :)
  replicas: 1
  podAnnotations: {}
  labels: {}
  limits:
    memory: 2000Mi
  requests:
    cpu: 100m
    memory: 100Mi
  prometheus:
    enabled: true
    port: 9101

metricsCollector:
  persistence:
    enabled: false
    volumeName: ""
    storageClassName: "efs-sc-thoras"
    accessMode: "ReadWriteOnce"
    createEFSStorageClass:
      fileSystemId: ""
    pvcStorageRequestSize: "3Gi"
  podAnnotations: {}
  labels: {}
  collector:
    name: thoras-collector
    limits:
      memory: "8192Mi"
    requests:
      cpu: "200m"
      memory: "32Mi"
  search:
    imageTag: "8.18.3"
    name: elasticsearch
    containerPort: 9200
    limits:
      memory: "8192Mi"
    requests:
      cpu: "200m"
      memory: "1536Mi"
  purge:
    ttl: 30
    schedule: "00 00 * * *"
  init:
    imageTag: "3.22.1"
    limits:
      memory: "8192Mi"
    requests:
      cpu: "16m"
      memory: "32Mi"
  timescale:
    imageTag: "2.21.0-pg16"
    name: timescale
    containerPort: 5432
    limits:
      memory: "8192Mi"
    requests:
      cpu: "400m"
      memory: "1280Mi"
  blobService:
    containerPort: 8080
    port: 80
    limits:
      memory: "8192Mi"
    requests:
      cpu: "16m"
      memory: "128Mi"
  additionalPvSecurityContext: {}

thorasApiServerV2:
  rbac:
    create: true
  serviceAccount:
    name: thoras-api
  containerPort: 8080
  podAnnotations: {}
  labels: {}
  replicas: 1
  limits:
    memory: 2000Mi
  requests:
    cpu: 128m
    memory: 100Mi
  port: 80
  logLevel: "info"
  timescalePrimary: false
  catalogRefreshInterval: "60s"
  cacheWindow: "10s"
  additionalPvSecurityContext: {}
  prometheus:
    enabled: true
  restartWorkloadOnCpu: false

thorasDashboard:
  enabled: true
  serviceAccount:
    name: thoras-dashboard
    create: true
  rbac:
    create: true
  podAnnotations: {}
  labels: {}
  containerPort: 5173
  nginxContainerPort: 80
  nginx:
    imageTag: "stable-alpine3.21"
  limits:
    memory: 2000Mi
  requests:
    cpu: 100m
    memory: 100Mi
  port: 80
  replicas: 1
  service:
    type: ClusterIP
    annotations: {}
  extras:
    show_savings: true

thorasMonitor:
  enabled: false
  unittesting: false
  limits:
    memory: "8192Mi"
  requests:
    cpu: "16m"
    memory: "64Mi"
  podAnnotations: {}
  labels: {}
  config: |

thorasMonitorV2:
  enabled: true

thorasForecast:
  skipCache: false
  requests:
    cpu: "256m"
    memory: "256Mi"
  limits:
    memory: "8Gi"
    cpu: "4"
  worker:
    replicas: 1
    pollingInterval: 15
    podAnnotations: {}
    retrainSteadyStateHours: ""
    labels: {}
    limits:
      memory: 2Gi
      cpu: 2
    requests:
      cpu: 1
      memory: 250Mi
    forecastTimeout: 600

thorasAgent:
  enabled: false
  serviceAccount:
    name: thoras-agent
  frequency: 15
  containerPort: 9101
  podAnnotations: {}
  labels: {}

thorasReasoning:
  enabled: false
  connectors:
    prometheus:
      baseUrl: "http://localhost"
  api:
    podAnnotations: {}
    labels: {}
    containerPort: 8080
    port: 80
    limits:
      memory: 2048Mi
    requests:
      cpu: 128m
      memory: 8Mi

# K8s client max queries per second
queriesPerSecond: "50"

# nodeSelector is used to assign components to specific nodes
nodeSelector: {}

tolerations: []
