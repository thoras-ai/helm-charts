---
thorasVersion: "4.3.0"
cluster:
  name: ""

imageCredentials:
  registry: "us-east4-docker.pkg.dev/thoras-registry/platform"
  username: "_json_key_base64"

  # Set the license key directly as a variable (or alternatively
  # use imageCredentials.secretRef to reference an existing secret
  password: ""

  # Reference a pre-existing secret in the Thoras namespace
  secretRef: ""

resourceQuota:
  enabled: false
  pods: 200
  cronjobs: 200
  jobs: 200

imagePullPolicy: "IfNotPresent"

logLevel: info

# Enable Slack errors
slackErrorsEnabled: false

# Set Slack notification Webhook URL directly (or alternatively use
# use slackWebhookUrlSecretRef to reference an existing secret
slackWebhookUrl: ""

# If you'd like to reference an existing secret, use these two values
# to indicate the secret name and data key
slackWebhookUrlSecretRefName: ""
slackWebhookUrlSecretRefKey: ""

thorasOperator:
  # Operator is a singleton -- don't change this :)
  replicas: 1
  podAnnotations: {}
  limits:
    memory: 2000Mi
  requests:
    cpu: 100m
    memory: 100Mi

metricsCollector:
  persistence:
    enabled: false
    volumeName: ""
    storageClassName: "efs-sc-thoras"
    createEFSStorageClass:
      fileSystemId: ""
    pvcStorageRequestSize: "3Gi"
  podAnnotations: {}
  collector:
    name: thoras-collector
  search:
    imageTag: "8.12.1"
    name: elasticsearch
    containerPort: 9200
  purge:
    ttl: 30
    schedule: "00 00 * * *"
  init:
    imageTag: "latest"
  timescale:
    imageTag: "2.17.2-pg16"
    name: timescale
    containerPort: 5432

thorasApiServer:
  containerPort: 8443
  replicas: 1
  podAnnotations: {}
  limits:
    memory: 2000Mi
  requests:
    cpu: 100m
    memory: 100Mi
  port: 443
  logLevel: "debug"

thorasApiServerV2:
  rbac:
    create: true
  serviceAccount:
    name: thoras-api
  containerPort: 8080
  podAnnotations: {}
  replicas: 1
  limits:
    memory: 2000Mi
  requests:
    cpu: 128m
    memory: 100Mi
  port: 80
  logLevel: "info"

thorasDashboard:
  enabled: true
  serviceAccount:
    name: thoras-dashboard
    create: true
  rbac:
    create: true
  podAnnotations: {}
  containerPort: 3000
  limits:
    memory: 2000Mi
  requests:
    cpu: 100m
    memory: 100Mi
  port: 80
  replicas: 1
  service:
    type: ClusterIP
    annotations: {}

thorasMonitor:
  enabled: false
  podAnnotations: {}
  config: |

thorasMonitorV2:
  enabled: false

thorasForecast:
  requestCpu:

thorasAgent:
  enabled: false
  serviceAccount:
    name: thoras-agent
  frequency: 15
  containerPort: 9101
  podAnnotations: {}

thorasReasoning:
  enabled: false
  connectors:
    prometheus:
      baseUrl: "http://localhost"
  api:
    podAnnotations: {}
    containerPort: 8080
    port: 80
    limits:
      memory: 2048Mi
    requests:
      cpu: 128m
      memory: 8Mi
