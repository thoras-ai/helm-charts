---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-collector
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: metrics-collector
  template:
    metadata:
      labels:
        app: metrics-collector
        app.kubernetes.io/name: {{ .Chart.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- with .Values.metricsCollector.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: thoras-collector
      {{- if .Values.metricsCollector.persistence.enabled }}
      volumes:
        - name: elastic-search-data
          persistentVolumeClaim:
            claimName:  elastic-search-data
      initContainers:
      - name: fix-dir-ownership
        image: {{ .Values.imageCredentials.registry }}/alpine:{{ .Values.metricsCollector.init.imageTag }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            mkdir -p /var/lib/share/elasticsearch/data
            find /var/lib/share/elasticsearch -not -name postgresql -not -name data -mindepth 1 -maxdepth 1 -exec mv {} /var/lib/share/elasticsearch/data \;
            chown -R 1000:0 /var/lib/share/elasticsearch/data
            rm -f /var/lib/share/elasticsearch/data/node.lock
        volumeMounts:
          - mountPath: /var/lib/share/elasticsearch
            name: elastic-search-data
      {{- end }}
      containers:
      - image: {{ .Values.imageCredentials.registry }}/elasticsearch:{{ .Values.metricsCollector.search.imageTag }}
        name: {{ .Values.metricsCollector.search.name }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        - containerPort: {{ .Values.metricsCollector.search.containerPort }}
        env:
          - name: ES_JAVA_OPTS
            value: -Xms750m -Xmx750m
          - name: discovery.type
            value: single-node
          - name: xpack.security.enabled
            value: "true"
          - name: bootstrap.memory_lock
            value: "false"
          {{- if .Values.metricsCollector.persistence.enabled }}
          - name: path.data
            value: /var/lib/share/elasticsearch/data
          {{- end}}
          - name: "ELASTIC_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: thoras-elastic-password
                key: password
        {{- if .Values.metricsCollector.persistence.enabled }}
        volumeMounts:
          - mountPath: /var/lib/share/elasticsearch
            name: elastic-search-data
        securityContext:
          runAsUser: 1000
          runAsGroup: 0
        {{- end }}
      - image: {{ .Values.imageCredentials.registry }}/timescaledb:{{ .Values.metricsCollector.timescale.imageTag }}
        name: timescaledb
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        - containerPort: 5432
        env:
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: password
          - name: "PGDATA"
            value: /var/lib/share/postgresql
        {{- if .Values.metricsCollector.persistence.enabled }}
        volumeMounts:
          - mountPath: /var/lib/share
            name: elastic-search-data
        securityContext:
          runAsUser: 1000
          runAsGroup: 0
        {{- end }}
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.metricsCollector.collector.imageTag }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        name: {{ .Values.metricsCollector.collector.name }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            retries=0
            max_retries=48
            until [ $retries -eq $max_retries ]; do
              if wget --spider -T 5 -q ${ELASTICSEARCH_URL}; then
                echo "elasticsearch ready"
                break
              else
                echo "elasticsearch not ready"
                retries=$((retries+1))
                sleep 5
              fi
            done
            if [ $retries -eq $max_retries ]; then
                echo "fatal: giving up on elasticsearch availability"
                exit 1
            fi

            # try to create the "thoras" database if it doesn't exist
            if ! psql -U postgres -h localhost -tc "SELECT 1 FROM pg_database WHERE datname = 'thoras'" | grep -q 1; then
                echo "creating database 'thoras'"
                psql -U postgres -h localhost -c "CREATE DATABASE thoras"
                echo "setting password"
                psql -U postgres -h localhost -c "ALTER USER postgres WITH PASSWORD '${POSTGRES_PASSWORD}'";
            fi
            # run any migrations, accounting for upgrade/downgrade scenarios
            ./scripts/migrate_database.sh


            ./metrics-collector init
            ./metrics-collector collect -c 60s
        env:
          - name: THORAS_NS
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: "ELASTICSEARCH_URL"
            valueFrom:
              secretKeyRef:
                name: thoras-elastic-password
                key: host
          - name: SERVICE_SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
            {{- if and .Values.slackWebhookUrlSecretRefName .Values.slackWebhookUrlSecretRefKey }}
                name: {{ .Values.slackWebhookUrlSecretRefName }}
                key: {{ .Values.slackWebhookUrlSecretRefKey }}
            {{- else }}
                name: thoras-slack
                key: webhookUrl
            {{- end }}
          - name: SERVICE_SLACK_ERRORS_ENABLED
            value: "{{ .Values.metricsCollector.slackErrorsEnabled | default .Values.slackErrorsEnabled }}"
          - name: SERVICE_CLUSTER_NAME
            value: "{{ .Values.cluster.name }}"
          - name: SERVICE_LOG_LEVEL
            value: {{ default .Values.logLevel .Values.metricsCollector.collector.logLevel }}
          - name: API_BASE_URL
            value: "http://thoras-api-server-v2"
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: host
          - name: DATABASE_URL
            value: "$(DATABASE_HOST)/thoras?sslmode=disable"
          - name: SERVICE_POSTGRESQL_DSN
            value: "$(DATABASE_HOST)/thoras?sslmode=disable"
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: password
