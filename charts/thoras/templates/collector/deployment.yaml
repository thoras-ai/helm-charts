---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "thoras.labels" . | nindent 4 }}
  name: metrics-collector
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: metrics-collector
  template:
    metadata:
      labels:
        app: metrics-collector
        {{- include "thoras.labels" . | nindent 8 }}
        {{- with .Values.metricsCollector.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        karpenter.sh/do-not-disrupt: "true"
      {{- with .Values.metricsCollector.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.metricsCollector.serviceAccount.name }}
      {{- if .Values.metricsCollector.persistence.enabled }}
      volumes:
        - name: elastic-search-data
          persistentVolumeClaim:
            claimName:  elastic-search-data
      initContainers:
      - name: fix-dir-ownership
        image: {{ .Values.imageCredentials.registry }}/alpine:{{ .Values.metricsCollector.init.imageTag }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            mkdir -p /var/lib/share/data

            # migrate non-elastic data to the new location
            find /var/lib/share -not -name postgresql -not -name data -not -name blobs -mindepth 1 -maxdepth 1 -exec mv {} /var/lib/share/data \;

            # fix elastic directory permissions
            chown -R 1000:1000 /var/lib/share/data
            rm -f /var/lib/share/data/node.lock

            # fix timescale directory
            mkdir -p /var/lib/share/postgresql
            chown -R 1000:1000 /var/lib/share/postgresql

            # fix blobs directory
            mkdir -p /var/lib/share/blobs
            chown -R 1000:1000 /var/lib/share/blobs
        resources:
          limits:
            memory: {{ .Values.metricsCollector.init.limits.memory }}
          requests:
            cpu: {{ .Values.metricsCollector.init.requests.cpu }}
            memory: {{ .Values.metricsCollector.init.requests.memory }}
        {{- with .Values.metricsCollector.additionalPvSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
          - mountPath: /var/lib/share
            name: elastic-search-data
      {{- end }}
      containers:
      - image: {{ .Values.imageCredentials.registry }}/elasticsearch:{{ .Values.metricsCollector.search.imageTag }}
        name: {{ .Values.metricsCollector.search.name }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        - containerPort: {{ .Values.metricsCollector.search.containerPort }}
        env:
          - name: ES_JAVA_OPTS
            value: -Xms750m -Xmx750m
          - name: discovery.type
            value: single-node
          - name: xpack.security.enabled
            value: "true"
          - name: bootstrap.memory_lock
            value: "false"
          {{- if .Values.metricsCollector.persistence.enabled }}
          - name: path.data
            value: /var/lib/share/elasticsearch/data
          {{- end}}
          - name: "ELASTIC_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: thoras-elastic-password
                key: password
        resources:
          limits:
            memory: {{ .Values.metricsCollector.search.limits.memory }}
          requests:
            cpu: {{ .Values.metricsCollector.search.requests.cpu }}
            memory: {{ .Values.metricsCollector.search.requests.memory }}
        {{- if .Values.metricsCollector.persistence.enabled }}
        volumeMounts:
          - mountPath: /var/lib/share/elasticsearch
            name: elastic-search-data
        securityContext:
          runAsUser: 1000
          runAsGroup: 0
          {{- with .Values.metricsCollector.additionalPvSecurityContext }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- end }}
      - image: {{ .Values.imageCredentials.registry }}/{{ .Values.metricsCollector.timescale.image }}:{{ .Values.metricsCollector.timescale.imageTag }}
        name: timescaledb
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        - containerPort: {{ .Values.metricsCollector.timescale.containerPort }}
        env:
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: password
        {{- if .Values.metricsCollector.persistence.enabled }}
          - name: "PGDATA"
            value: /var/lib/share/postgresql
        {{- end }}
        resources:
          limits:
            memory: {{ .Values.metricsCollector.timescale.limits.memory }}
          requests:
            cpu: {{ .Values.metricsCollector.timescale.requests.cpu }}
            memory: {{ .Values.metricsCollector.timescale.requests.memory }}
        {{- if .Values.metricsCollector.persistence.enabled }}
        volumeMounts:
          - mountPath: /var/lib/share
            name: elastic-search-data
        securityContext:
          runAsUser: 1000
          runAsGroup: 0
          {{- with .Values.metricsCollector.additionalPvSecurityContext }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- end }}
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.metricsCollector.collector.imageTag }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        name: {{ .Values.metricsCollector.collector.name }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            # wait for elasticsearch to be available
            retries=0
            max_retries=48
            until [ $retries -eq $max_retries ]; do
              if wget --spider -T 5 -q ${ELASTICSEARCH_URL}; then
                echo "elasticsearch ready"
                break
              else
                echo "elasticsearch not ready"
                retries=$((retries+1))
                sleep 5
              fi
            done
            if [ $retries -eq $max_retries ]; then
                echo "fatal: giving up on elasticsearch availability"
                exit 1
            fi

            # wait for postgres to be available
            retries=0
            max_retries=48
            until [ $retries -ge $max_retries ]; do
              if pg_isready -h localhost ; then
                break
              else
                echo "postgres not ready"
                retries=$((retries+1))
                sleep 5
              fi
            done
            if [ $retries -ge $max_retries ]; then
              echo "Failed to connect to database after $max_retries retries"
              exit 1
            fi

            # try to create the "thoras" database if it doesn't exist
            if ! psql -U postgres -h localhost -tc "SELECT 1 FROM pg_database WHERE datname = 'thoras'" | grep -q 1; then
                echo "creating database 'thoras'"
                psql -U postgres -h localhost -c "CREATE DATABASE thoras"
            fi

            # ensure the postgres user has the correct password
            echo "setting password"
            psql -U postgres -h localhost -c "ALTER USER postgres WITH PASSWORD '${POSTGRES_PASSWORD}'";

            # run any migrations, accounting for upgrade/downgrade scenarios
            ./scripts/migrate_database.sh


            ./metrics-collector init
            ./metrics-collector collect -c 60s
        env:
          - name: "ELASTICSEARCH_URL"
            valueFrom:
              secretKeyRef:
                name: thoras-elastic-password
                key: host
          - name: SERVICE_SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
            {{- if and .Values.slackWebhookUrlSecretRefName .Values.slackWebhookUrlSecretRefKey }}
                name: {{ .Values.slackWebhookUrlSecretRefName }}
                key: {{ .Values.slackWebhookUrlSecretRefKey }}
            {{- else }}
                name: thoras-slack
                key: webhookUrl
            {{- end }}
          - name: SERVICE_SLACK_ERRORS_ENABLED
            value: "{{ .Values.metricsCollector.slackErrorsEnabled | default .Values.slackErrorsEnabled }}"
          - name: SERVICE_CLUSTER_NAME
            value: "{{ .Values.cluster.name }}"
          - name: SERVICE_LOG_LEVEL
            value: {{ default .Values.logLevel .Values.metricsCollector.collector.logLevel }}
          - name: SERVICE_THORAS_API_BASE_URL
            value: "http://thoras-api-server-v2"
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: host
          - name: DATABASE_URL
            value: "$(DATABASE_HOST)/thoras?sslmode=disable"
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: password
          - name: SERVICE_COLLECTION_PARALLELIZATION
            value: "{{ .Values.metricsCollector.collector.parallelization | default 20}}"
          - name: SERVICE_THORAS_VERSION
            value: "{{ .Values.metricsCollector.collector.imageTag | default .Values.thorasVersion }}"
          - name: SERVICE_CHART_VERSION
            value: "{{ .Chart.Version }}"
        resources:
          limits:
            memory: {{ .Values.metricsCollector.collector.limits.memory }}
          requests:
            cpu: {{ .Values.metricsCollector.collector.requests.cpu }}
            memory: {{ .Values.metricsCollector.collector.requests.memory }}
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.metricsCollector.collector.imageTag }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        name: thoras-blob-api
        command: ["/app/blob-service"]
        env:
          - name: SERVICE_PORT
            value: {{ .Values.metricsCollector.blobService.containerPort | quote }}
          - name: SERVICE_SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
            {{- if and .Values.slackWebhookUrlSecretRefName .Values.slackWebhookUrlSecretRefKey }}
                name: {{ .Values.slackWebhookUrlSecretRefName }}
                key: {{ .Values.slackWebhookUrlSecretRefKey }}
            {{- else }}
                name: thoras-slack
                key: webhookUrl
            {{- end }}
          - name: SERVICE_SLACK_ERRORS_ENABLED
            value: "{{ .Values.metricsCollector.slackErrorsEnabled | default .Values.slackErrorsEnabled }}"
          - name: "SERVICE_LOG_LEVEL"
            value: {{ default .Values.logLevel .Values.thorasApiServerV2.logLevel }}
          - name: SERVICE_STORAGE_FILE_PATH
            value: "/var/lib/share"
        resources:
          limits:
            memory: {{ .Values.metricsCollector.blobService.limits.memory }}
          requests:
            cpu: {{ .Values.metricsCollector.blobService.requests.cpu }}
            memory: {{ .Values.metricsCollector.blobService.requests.memory }}
        {{- if .Values.metricsCollector.persistence.enabled }}
        volumeMounts:
          - mountPath: /var/lib/share
            name: elastic-search-data
        securityContext:
          runAsUser: 1000
          runAsGroup: 0
          {{- with .Values.metricsCollector.additionalPvSecurityContext }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
