---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thoras-api-server-v2
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "thoras.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.thorasApiServerV2.replicas }}
  selector:
    matchLabels:
      app: thoras-api-server-v2
  template:
    metadata:
      labels:
        app: thoras-api-server-v2
        {{- include "thoras.labels" . | nindent 8 }}
        {{- with .Values.thorasApiServerV2.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        karpenter.sh/do-not-disrupt: "true"
      {{- with .Values.thorasApiServerV2.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.thorasApiServerV2.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: {{ .Values.thorasApiServerV2.containerPort | quote}}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.thorasApiServerV2.serviceAccount.name }}
      initContainers:
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.thorasApiServerV2.imageTag }}
        name: wait-for-postgres
        env:
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: host
        command: ["/bin/sh", "-c"]
        args:
          - |
            retries=0
            max_retries=48
            until [ $retries -ge $max_retries ]; do
              if pg_isready -q -d ${DATABASE_HOST}/thoras; then
                break
              else
                echo "postgres not ready"
                retries=$((retries+1))
                sleep 5
              fi
            done
            if [ $retries -ge $max_retries ]; then
              echo "Failed to connect to database after $max_retries retries"
              exit 1
            fi
      containers:
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.thorasApiServerV2.imageTag }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        name: thoras-v2-api-server
        command: ["/app/api-server"]
        env:
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: host
          - name: SERVICE_PORT
            value: {{ .Values.thorasApiServerV2.containerPort | quote }}
          - name: SERVICE_POSTGRESQL_DSN
            value: "$(DATABASE_HOST)/thoras"
          - name: "ELASTICSEARCH_URL"
            valueFrom:
              secretKeyRef:
                name: thoras-elastic-password
                key: host
          - name: SERVICE_SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
            {{- if and .Values.slackWebhookUrlSecretRefName .Values.slackWebhookUrlSecretRefKey }}
                name: {{ .Values.slackWebhookUrlSecretRefName }}
                key: {{ .Values.slackWebhookUrlSecretRefKey }}
            {{- else }}
                name: thoras-slack
                key: webhookUrl
            {{- end }}
          - name: SERVICE_REASONING_API_URL
            value: "http://thoras-reasoning-api.thoras.svc.cluster.local"
          - name: SERVICE_SLACK_ERRORS_ENABLED
            value: "{{ .Values.thorasApiServerV2.slackErrorsEnabled | default .Values.slackErrorsEnabled }}"
          - name: "SERVICE_LOG_LEVEL"
            value: {{ default .Values.logLevel .Values.thorasApiServerV2.logLevel }}
          - name: SERVICE_POD_LOG_LABEL
            value: {{ (printf "app.kubernetes.io/name=%s" .Chart.Name) | quote }}
          - name: "SERVICE_PROMETHEUS_API_URL"
            value: {{ .Values.thorasReasoning.connectors.prometheus.baseUrl }}
          - name: SERVICE_CLUSTER_NAME
            value: "{{ .Values.cluster.name }}"
          - name: SERVICE_BLOB_SERVICE_API_URL
            value: "http://thoras-blob-api.thoras.svc.cluster.local"
          - name: SERVICE_TIMESCALE_PRIMARY
            value: {{ .Values.thorasApiServerV2.timescalePrimary | quote}}
          - name: SERVICE_TIMESCALE_SNAPSHOT_PRIMARY
            value: {{ .Values.thorasApiServerV2.timescaleSnapshotPrimary | quote}}
          - name: SERVICE_QUERIES_PER_SECOND
            value: {{ .Values.thorasApiServerV2.queriesPerSecond | default .Values.queriesPerSecond | quote }}
          - name: SERVICE_CATALOG_REFRESH_INTERVAL
            value: {{ .Values.thorasApiServerV2.catalogRefreshInterval | quote }}
          - name: SERVICE_CACHE_WINDOW
            value: {{ .Values.thorasApiServerV2.cacheWindow | quote }}
          - name: SERVICE_THORAS_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SERVICE_RESTART_WORKLOAD_ON_CPU
            value: {{ .Values.thorasApiServerV2.restartWorkloadOnCpu | quote }}
        ports:
        - containerPort: {{ .Values.thorasApiServerV2.containerPort }}
        startupProbe:
          httpGet:
            path: /health
            port: {{ .Values.thorasApiServerV2.containerPort }}
          failureThreshold: 12
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.thorasApiServerV2.containerPort }}
        resources:
          limits:
            memory: {{ .Values.thorasApiServerV2.limits.memory }}
          requests:
            cpu: {{ .Values.thorasApiServerV2.requests.cpu }}
            memory: {{ .Values.thorasApiServerV2.requests.memory }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
