{{- if .Values.thorasWorker.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thoras-worker
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "thoras.labels" . | nindent 4 }}
  annotations:
    {{- if not .Values.thorasMonitor.unittesting }}
      checksum/configmap: {{ include (print $.Template.BasePath "/monitor/configmap.yaml") . | sha256sum }}
    {{- end }}
spec:
  replicas: {{ .Values.thorasWorker.replicas }}
  selector:
    matchLabels:
      app: thoras-worker
  template:
    metadata:
      labels:
        app: thoras-worker
        {{- include "thoras.labels" . | nindent 8 }}
        {{- with .Values.thorasWorker.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        karpenter.sh/do-not-disrupt: "true"
      {{- with .Values.thorasWorker.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.thorasWorker.serviceAccount.name }}
      volumes:
      - name: monitor-config
        configMap:
          name: thoras-monitor-config
      initContainers:
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.thorasWorker.imageTag }}
        name: wait-for-postgres
        env:
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: host
        command: ["/bin/sh", "-c"]
        args:
          - |
            retries=0
            max_retries=48
            until [ $retries -ge $max_retries ]; do
              if pg_isready -q -d ${DATABASE_HOST}/thoras; then
                break
              else
                echo "postgres not ready"
                retries=$((retries+1))
                sleep 5
              fi
            done
            if [ $retries -ge $max_retries ]; then
              echo "Failed to connect to database after $max_retries retries"
              exit 1
            fi
      containers:
      - image: {{ .Values.imageCredentials.registry }}/services:{{ default .Values.thorasVersion .Values.thorasWorker.imageTag }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        name: thoras-worker
        command: ["/app/worker"]
        env:
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: thoras-timescale-password
                key: host
          - name: SERVICE_POSTGRESQL_DSN
            value: "$(DATABASE_HOST)/thoras"
          - name: SERVICE_SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
            {{- if and .Values.slackWebhookUrlSecretRefName .Values.slackWebhookUrlSecretRefKey }}
                name: {{ .Values.slackWebhookUrlSecretRefName }}
                key: {{ .Values.slackWebhookUrlSecretRefKey }}
            {{- else }}
                name: thoras-slack
                key: webhookUrl
            {{- end }}
          - name: SERVICE_SLACK_ERRORS_ENABLED
            value: "{{ .Values.thorasWorker.slackErrorsEnabled | default .Values.slackErrorsEnabled }}"
          - name: "SERVICE_LOG_LEVEL"
            value: {{ default .Values.logLevel .Values.thorasWorker.logLevel }}
          - name: SERVICE_CLUSTER_NAME
            value: "{{ .Values.cluster.name }}"
          - name: SERVICE_QUERIES_PER_SECOND
            value: {{ .Values.thorasWorker.queriesPerSecond | default .Values.queriesPerSecond | quote }}
        resources:
          limits:
            memory: {{ .Values.thorasWorker.limits.memory }}
          requests:
            cpu: {{ .Values.thorasWorker.requests.cpu }}
            memory: {{ .Values.thorasWorker.requests.memory }}
        volumeMounts:
        - name: monitor-config
          mountPath: /app/config.yaml
          subPath: config.yaml
          readOnly: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
